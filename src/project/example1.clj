(= (take 5 (repeat "s")) (repeat 5 "s"))
(= (replicate 5 "s") (repeat 5 "s"))
(replicate 5 (rand-int 10))
(repeat 5 (rand-int 100)) 
(repeatedly 5 #(rand-int 100))
(= (range 1 5 2) '(1 3))
(take 3 (repeat '(a b c d e)))
(= (split-at 2 '(a b c d e)) [(take 2 '(a b c d e)) (drop 2 '(a b c d e))])
(= (split-with even? '(1 2 3 4)) [(take-while even? '(1 2 3 4)) (drop-while even? '(1 2 3 4))])
(take 10 (cycle (range 4)))
(take 10 (cycle '(a b c d)))
(take 5 (iterate inc 5))
(take 10 (iterate (partial + 2) 0))
(take 10 (iterate (partial * 2) 1))
(take 10 (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))
(identity 4)
(filterv identity '(a nil b true 2 false "abs"))
(filter identity '(a nil b true 2 false "abs"))
(split-with identity '(true a 1 nil b false))
(partition-by identity '(a a a b c c d))
(partition-by identity '(true a 1 nil b false))
(mapv inc '(1 2 3))
(mapv + '(1 2 3) '(4 5 6))
(mapv + '(1 2 3) (iterate inc 1))
(filterv even? (range 10))
(def pi (constantly 3.18))
(= (pi) (pi 10) (pi "abc") (pi 1 2 3))
(= (zipmap [:a :b :c] [1 2 3]) {:a 1 :b 2 :c 3} (zipmap [:a :b :c] (iterate inc 1)))
(zipmap [:html :body :div] (repeat {:margin 0 :padding 0}))
(= (repeatedly 3 #(range 5)) (take 3 (repeatedly #(range 5))) '((0 1 2 3 4) (0 1 2 3 4) (0 1 2 3 4)))



